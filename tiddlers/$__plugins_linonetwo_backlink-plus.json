{
    "tiddlers": {
        "/home/runner/work/wiki/wiki/plugins/linonetwo/backlink-plus/getBacklinks.js": {
            "title": "/home/runner/work/wiki/wiki/plugins/linonetwo/backlink-plus/getBacklinks.js",
            "text": "\n/*\nReturn an array of tiddler titles that link to the specified tiddler\n*/\nexports.getTiddlerBacklinks = function(targetTitle) {\n\tvar self = this,\n\t\tbacklinksIndexer = this.getIndexer(\"BacklinksIndexer\"),\n\t\tbacklinks = backlinksIndexer && backlinksIndexer.lookup(targetTitle);\n\n\tif(!backlinks) {\n\t\tbacklinks = [];\n\t\tthis.forEachTiddler(function(title,tiddler) {\n\t\t\tvar links = self.getTiddlerLinks(title);\n\t\t\tif(links.indexOf(targetTitle) !== -1) {\n\t\t\t\tbacklinks.push(title);\n\t\t\t}\n\t\t});\n\t}\n\treturn backlinks;\n};"
        },
        "$:/core/modules/indexers/imgbacklinks-indexer.js": {
            "title": "$:/core/modules/indexers/imgbacklinks-indexer.js",
            "text": "/*\\\ntitle: $:/core/modules/indexers/imgbacklinks-indexer.js\ntype: application/javascript\nmodule-type: indexer\n\nIndexes the tiddlers' imgbacklinks\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global modules: false */\n\"use strict\";\n\nfunction extractLinks(parseTreeRoot) {\n\t// Count up the links\n\tvar links = [],\n\t\tcheckParseTree = function(parseTree) {\n\t\t\tfor(var t=0; t<parseTree.length; t++) {\n\t\t\t\tvar parseTreeNode = parseTree[t];\n\t\t\t\tif(parseTreeNode.type === \"link\" && parseTreeNode.attributes.to && parseTreeNode.attributes.to.type === \"string\") {\n\t\t\t\t\tvar value = parseTreeNode.attributes.to.value;\n\t\t\t\t\tif(links.indexOf(value) === -1) {\n\t\t\t\t\t\tlinks.push(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(parseTreeNode.children) {\n\t\t\t\t\tcheckParseTree(parseTreeNode.children);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\tcheckParseTree(parseTreeRoot);\n\treturn links;\n};\n\n\n\nfunction ImgBacklinksIndexer(wiki) {\n\tthis.wiki = wiki;\n}\n\nImgBacklinksIndexer.prototype.init = function() {\n\tthis.index = null;\n}\n\nImgBacklinksIndexer.prototype.rebuild = function() {\n\tthis.index = null;\n}\n\nImgBacklinksIndexer.prototype._getLinks = function(tiddler) {\n\tvar parser =  this.wiki.parseText(tiddler.fields.type, tiddler.fields.text, {});\n\tif(parser) {\n\t\treturn extractLinks(parser.tree);\n\t}\n\treturn [];\n}\n\nImgBacklinksIndexer.prototype.update = function(updateDescriptor) {\n\tif(!this.index) {\n\t\treturn;\n\t}\n\tvar newLinks = [],\n\t    oldLinks = [],\n\t    self = this;\n\tif(updateDescriptor.old.exists) {\n\t\toldLinks = this._getLinks(updateDescriptor.old.tiddler);\n\t}\n\tif(updateDescriptor.new.exists) {\n\t\tnewLinks = this._getLinks(updateDescriptor.new.tiddler);\n\t}\n\n\t$tw.utils.each(oldLinks,function(link) {\n\t\tif(self.index[link]) {\n\t\t\tdelete self.index[link][updateDescriptor.old.tiddler.fields.title];\n\t\t}\n\t});\n\t$tw.utils.each(newLinks,function(link) {\n\t\tif(!self.index[link]) {\n\t\t\tself.index[link] = Object.create(null);\n\t\t}\n\t\tself.index[link][updateDescriptor.new.tiddler.fields.title] = true;\n\t});\n}\n\nImgBacklinksIndexer.prototype.lookup = function(title) {\n\tif(!this.index) {\n\t\tthis.index = Object.create(null);\n\t\tvar self = this;\n\t\tthis.wiki.forEachTiddler(function(title,tiddler) {\n\t\t\tvar links = self._getLinks(tiddler);\n\t\t\t$tw.utils.each(links, function(link) {\n\t\t\t\tif(!self.index[link]) {\n\t\t\t\t\tself.index[link] = Object.create(null);\n\t\t\t\t}\n\t\t\t\tself.index[link][title] = true;\n\t\t\t});\n\t\t});\n\t}\n\tif(this.index[title]) {\n\t\treturn Object.keys(this.index[title]);\n\t} else {\n\t\treturn [];\n\t}\n}\n\nexports.ImgBacklinksIndexer = ImgBacklinksIndexer;\n\n})();\n",
            "type": "application/javascript",
            "module-type": "indexer"
        },
        "$:/core/modules/filters/imgbacklinks.js": {
            "title": "$:/core/modules/filters/imgbacklinks.js",
            "text": "/*\\\ntitle: $:/core/modules/filters/imgbacklinks.js\ntype: application/javascript\nmodule-type: filteroperator\n\nFilter operator for returning all the usage of an img tiddler\n\n\\*/\n(function () {\n  /*jslint node: true, browser: true */\n  /*global $tw: false */\n  'use strict';\n\n  /*\nExport our filter function\n*/\n  exports.imgbacklinks = function (source, operator, options) {\n    var results = [];\n    source(function (tiddler, title) {\n      $tw.utils.pushTop(results, options.wiki.getTiddlerBacklinks(title));\n    });\n    return results;\n  };\n})();\n",
            "type": "application/javascript",
            "module-type": "filteroperator"
        },
        "$:/plugins/linonetwo/backlink-plus/readme": {
            "title": "$:/plugins/linonetwo/backlink-plus/readme",
            "type": "text/vnd.tiddlywiki",
            "creator": "LinOnetwo"
        }
    }
}